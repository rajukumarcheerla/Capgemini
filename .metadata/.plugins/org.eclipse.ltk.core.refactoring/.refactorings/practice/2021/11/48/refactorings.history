<?xml version="1.0" encoding="UTF-8"?>
<session version="1.0">&#x0A;<refactoring comment="Extract local variable &apos;nextInt&apos; from expression &apos;sc.nextInt()&apos;&#x0D;&#x0A;- Original project: &apos;practice&apos;&#x0D;&#x0A;- Variable name: &apos;nextInt&apos;&#x0D;&#x0A;- Destination method: &apos;practice.fact.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;sc.nextInt()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;nextInt&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;practice{fact.java" name="nextInt" replace="true" selection="167 0" stamp="1637830312286" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;keySet&apos; from expression &apos;hm.keySet()&apos;&#x0D;&#x0A;- Original project: &apos;practice&apos;&#x0D;&#x0A;- Variable name: &apos;keySet&apos;&#x0D;&#x0A;- Destination method: &apos;practice.Mai.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;hm.keySet()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;keySet&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;practice{Mai.java" name="keySet" replace="true" selection="1016 0" stamp="1637856798504" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;entrySet&apos; from expression &apos;hm.entrySet()&apos;&#x0D;&#x0A;- Original project: &apos;practice&apos;&#x0D;&#x0A;- Variable name: &apos;entrySet&apos;&#x0D;&#x0A;- Destination method: &apos;practice.Mai.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;hm.entrySet()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;entrySet&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;practice{Mai.java" name="entrySet" replace="true" selection="1076 0" stamp="1637856999407" varType="false" version="1.0"/>&#x0A;<refactoring comment="Move element &apos;fact.java&apos; to &apos;practice/src/Fact&apos;&#x0D;&#x0A;- Original project: &apos;practice&apos;&#x0D;&#x0A;- Destination element: &apos;practice/src/Fact&apos;&#x0D;&#x0A;- Original element: &apos;practice.fact.java&apos;&#x0D;&#x0A;- Update references to refactored element" description="Move compilation unit" destination="/src&lt;Fact" element1="/src&lt;practice{fact.java" files="0" flags="589830" folders="0" id="org.eclipse.jdt.ui.move" patterns="*" policy="org.eclipse.jdt.ui.moveResources" qualified="false" references="true" stamp="1637891883745" units="1" version="1.0"/>&#x0A;<refactoring comment="Rename package &apos;practice&apos; to &apos;collections&apos;&#x0D;&#x0A;- Original project: &apos;practice&apos;&#x0D;&#x0A;- Original element: &apos;practice/src/practice&apos;&#x0D;&#x0A;- Renamed element: &apos;practice/src/collections&apos;&#x0D;&#x0A;- Update references to refactored element&#x0D;&#x0A;- Update textual occurrences in comments and strings" description="Rename package &apos;practice&apos;" flags="589830" hierarchical="false" id="org.eclipse.jdt.ui.rename.package" input="/src&lt;practice" name="collections" qualified="false" references="true" stamp="1637891918291" textual="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;list2&apos; from expression &apos;list.stream().filter(a -&gt; a.getId() &gt;= 3).map(a -&gt; a.getName() + &quot;$$$&quot;).toList()&apos;&#x0D;&#x0A;- Original project: &apos;practice&apos;&#x0D;&#x0A;- Variable name: &apos;list2&apos;&#x0D;&#x0A;- Destination method: &apos;java8.Streams.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;list.stream().filter(a -&gt; a.getId() &gt;= 3).map(a -&gt; a.getName() + &quot;$$$&quot;).toList()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;list2&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8{Streams.java" name="list2" replace="true" selection="699 0" stamp="1637896910598" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;anyMatch&apos; from expression &apos;list.stream().anyMatch(a -&gt; a.getName().endsWith(&quot;u&quot;))&apos;&#x0D;&#x0A;- Original project: &apos;practice&apos;&#x0D;&#x0A;- Variable name: &apos;anyMatch&apos;&#x0D;&#x0A;- Destination method: &apos;java8.Streams.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;list.stream().anyMatch(a -&gt; a.getName().endsWith(&quot;u&quot;))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;anyMatch&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8{Streams.java" name="anyMatch" replace="true" selection="875 0" stamp="1637907461702" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;list.stream().collect(Collectors.toSet())&apos;&#x0D;&#x0A;- Original project: &apos;practice&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;java8.Streams.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;list.stream().collect(Collectors.toSet())&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8{Streams.java" name="collect" replace="true" selection="901 0" stamp="1637907885901" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;min&apos; from expression &apos;collect.stream().min((a,b) -&gt; a.compareTo(b))&apos;&#x0D;&#x0A;- Original project: &apos;practice&apos;&#x0D;&#x0A;- Variable name: &apos;min&apos;&#x0D;&#x0A;- Destination method: &apos;java8.Streams.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;collect.stream().min((a,b) -&gt; a.compareTo(b))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;min&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8{Streams.java" name="min" replace="true" selection="1053 0" stamp="1637908130693" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;set&apos; from expression &apos;list.stream().filter(a -&gt; a.getId() % 2 == 0).collect(Collectors.toSet())&apos;&#x0D;&#x0A;- Original project: &apos;practice&apos;&#x0D;&#x0A;- Variable name: &apos;set&apos;&#x0D;&#x0A;- Destination method: &apos;java8.Streams.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;list.stream().filter(a -&gt; a.getId() % 2 == 0).collect(Collectors.toSet())&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;set&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8{Streams.java" name="set" replace="true" selection="1321 0" stamp="1637909004276" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;list.stream().collect(Collectors.averagingInt(a -&gt; a.getId()))&apos;&#x0D;&#x0A;- Original project: &apos;practice&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;java8.Collecters.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;list.stream().collect(Collectors.averagingInt(a -&gt; a.getId()))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8{Collecters.java" name="collect" replace="true" selection="585 0" stamp="1637912226985" varType="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect2&apos; from expression &apos;list.stream().collect(Collectors.counting())&apos;&#x0D;&#x0A;- Original project: &apos;practice&apos;&#x0D;&#x0A;- Variable name: &apos;collect2&apos;&#x0D;&#x0A;- Destination method: &apos;java8.Collecters.main(...)&apos;&#x0D;&#x0A;- Variable expression: &apos;list.stream().collect(Collectors.counting())&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect2&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;java8{Collecters.java" name="collect2" replace="true" selection="818 0" stamp="1637921927781" varType="false" version="1.0"/>
</session>